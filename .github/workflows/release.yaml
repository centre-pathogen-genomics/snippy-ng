name: Release

on:
  push:
    branches: [dev] 
  workflow_dispatch: # manual trigger
    
  

permissions:
  contents: write

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: 'dev'
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Set-up pixi environment
        uses: prefix-dev/setup-pixi@v0.8.3

      - name: Install Hatch
        run: pip install hatch

      - name: Run tests with coverage
        run: |
          hatch run cov
      
      - name: Fail if coverage decreased
        uses: insightsengineering/coverage-action@v2
        with:
          path: ./coverage.xml
          diff: true
          diff-branch: main
          coverage-reduction-failure: true   # ðŸ”´ makes the job fail
          fail: true                         # same, explicit
          publish: true                      # nice PR summary comment

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          tokens: ${{ secrets.CODECOV_TOKEN }}
  
  benchmark:
    name: CLI responsiveness with latest Python
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      STABLE_PYTHON_VERSION: '3.12'
      HYPERFINE_VERSION: '1.18.0'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.STABLE_PYTHON_VERSION }}

    - name: Install UV
      run: curl -LsSf https://github.com/astral-sh/uv/releases/latest/download/uv-installer.sh | sh

    - name: Install hyperfine
      uses: taiki-e/install-action@v2
      with:
        tool: hyperfine@${{ env.HYPERFINE_VERSION }}

    - name: Install ourself
      run: |
        uv pip install --system .

    - name: Benchmark
      id: Benchmark
      run: |
        hyperfine \
          -m 100 \
          --warmup 10 \
          --export-csv=hyperfine.csv \
          "snippy-ng --help" \
          "snippy-ng snps --help"
        # check if the max value in the mean column is less than 0.2 seconds
        max=$(awk -F, 'NR>1 {print $2}' hyperfine.csv | sort -n | tail -n 1)
        # convert to milliseconds
        max=$(echo "$max * 1000" | bc)
        # round to 1 decimal place
        max=$(echo "scale=1; $max/1" | bc)
        if (( $(echo "$max > 200" | bc -l) )); then
          exit 1
        fi
        echo "BENCHMARK=${max} ms" >> $GITHUB_OUTPUT
        
    - name: Benchmark badge
      uses: RubbaBoy/BYOB@v1.3.0
      with:
        NAME: benchmark
        ICON: https://raw.githubusercontent.com/centre-pathogen-genomics/snippy-ng/main/docs/images/bolt.svg
        STATUS: ${{ steps.Benchmark.outputs.BENCHMARK }}
        COLOR: f1c40f
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  release:
    needs: [test-and-coverage, benchmark]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      id-token: write
      contents: write

    steps:
      # Note: We checkout the repository at the branch that triggered the workflow
      # with the entire history to ensure to match PSR's release branch detection
      # and history evaluation.
      # However, we forcefully reset the branch to the workflow sha because it is
      # possible that the branch was updated while the workflow was running. This
      # prevents accidentally releasing un-evaluated changes.
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: 'dev'
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Evaluate | Verify upstream has NOT changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running. This is important
        # because we are committing a version change (--commit). You may omit this step
        # if you have 'commit: false' in your configuration.
        #
        # You may consider moving this to a repo script and call it from this step instead
        # of writing it in-line.
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Install Hatch
        run: pip install hatch
      
      - name: Merge develop into main
        run: |
          git checkout main
          git pull
          git merge origin/dev
          git push

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hatch run release
          git add .
          git commit -m "Release v$(hatch run semantic-release version --print)"
      

