name: Release

on:
  workflow_dispatch:   # manual trigger

permissions:
  contents: write

jobs:
  test-and-coverage:
    uses: ./.github/workflows/tests.yml 
    with:
      publish: true
    secrets: inherit                     # pass all secrets down

  benchmark:
    uses: ./.github/workflows/benchmark.yml
    secrets: inherit

  release:
    needs: [test-and-coverage, benchmark]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Force branch to workflow SHA
        run: git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        shell: bash
        run: |
          set +o pipefail
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          echo "Upstream branch name: $UPSTREAM_BRANCH_NAME"
          set -o pipefail
          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
            echo "::error::Unable to determine upstream branch name!"
            exit 1
          fi
          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"
          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
            echo "::error::Unable to determine upstream branch sha!"
            exit 1
          fi
          HEAD_SHA="$(git rev-parse HEAD)"
          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
            echo "::error::Upstream has changed, aborting release..."
            exit 1
          fi
          echo "Verified upstream branch has not changed, continuing..."

      - name: Install Hatch
        run: pip install hatch

      - name: Configure git
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name  "GitHub Actions"

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hatch run release
          git add .
          git commit -m "chore(release): v$(hatch run semantic-release version --print)"
          git push
  
  build-and-release:
    runs-on: ubuntu-latest
    needs: release

    strategy:
      matrix:
        platform: ["osx-64", "linux-64"]
      fail-fast: true

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Run Pixi-Pack
        uses: wytamma/pixi-pack-action@v4.1
        with:
          platform: ${{ matrix.platform }}
          recipe: "recipe/recipe.yaml"

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: "${{ github.event.repository.name }}-*.sh, install.sh"
  
  create-install-script-and-release:
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Create install script
        uses: wytamma/pixi-pack-install-script@v1
        with:
          entrypoint: "snippy-ng"

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: "install.sh"